name: Asset Solution Deployment

env:
  BABYLON_SERVICE: ${{ vars.BABYLON_SERVICE }}
  BABYLON_TOKEN: ${{ secrets.BABYLON_TOKEN }}
  BABYLON_ORG_NAME: ${{ vars.BABYLON_ORG_NAME }} 
  BABYLON_ENCODING_KEY: ${{ secrets.BABYLON_ENCODING_KEY }}
  GITHUB_PAT: ${{ secrets.PAT }}

on:
  workflow_dispatch:
    inputs:
      context_id:
        description: 'Select CONTEXT_ID'
        required: true
        default: 'asset'
        type: string
        enum:
          - 'asset'
      platform_id:
        description: 'Select PLATFORM_ID'
        required: true
        default: 'dev'
        type: string
        enum:
          - 'dev'
          - 'perf'
          - 'staging'
  push:
    branches:
      - master
  pull_request:
    branches:
      - master 
jobs:
  asset-deploy:
    runs-on: ubuntu-latest
    env:
      dir: personal
      config_path: ./config
      CONTEXT_ID: ${{ github.event.inputs.context_id || 'asset' }}
      PLATFORM_ID: ${{ github.event.inputs.platform_id || 'dev' }}
    steps:
      - uses: actions/checkout@v3

      - name: install babylon
        uses: Cosmo-Tech/babylon-actions/.github/actions/babylon@asset

      - name: Setup basic configuration
        uses: Cosmo-Tech/babylon-actions/.github/actions/set-variables@asset
        with: 
          email: mohcine.tor@cosmotech.com
          user_principal_id: 67bf46cc-38ec-4f23-aba7-fedfcde26856
          workspace_key: BabyAsset
          team_id: 25d59980-4644-4ba0-af6f-2ce9fae86c96
          simulator_image_docker: simulator_simulator
          simulator_version: ASSET_5555fc9d_DEBUG_2023-11-23-15h33
          uri_artifact_zip: https://github.com/Cosmo-Tech/azure-function-scenario-download/releases/download/v1.0.1/artifact.zip
          deployment_name: devasset
          location: eastus2
          repo_to: azure-webapp-asset-qa
          branch_to: dev/asset
          organization: Cosmo-Tech
          api_url: https://dev.api.cosmotech.com/v2-4-dev 
          api : "true"
          item: "common"
          
      
      - name: create a new organization
        uses: Cosmo-Tech/babylon-actions/.github/actions/organization@asset
        with:
          name: "Asset_Org_Cosmo_Tech"
          email: mohcine.tor@cosmotech.com
          role: admin

      - name: create container storage by default
        uses: Cosmo-Tech/babylon-actions/.github/actions/storage@asset

      - name: deploy adx database and permissions
        uses: Cosmo-Tech/babylon-actions/.github/actions/adx@asset

      - name: deploy eventhub namespaces and permissions
        uses: Cosmo-Tech/babylon-actions/.github/actions/eventhub@asset
        with:
          name: "Asset_Eventhub_Deploy"

      - name: azure login
        uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ vars.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ vars.SUBSCRIPTION_ID }}","tenantId":"${{ vars.TENANT_ID }}"}'
            
      - name: Authentication Eventhub configuration
        uses: Cosmo-Tech/babylon-actions/.github/actions/eventkey@asset
        with:
          resource_group: phoenixdev

      - name : Generate Workspace Name
        id : GWN
        run : |
            WNDASH=$(date "+%Y-%m-%d_%H:%M:%S")_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 4)
            echo "WNDASH=$WNDASH" >> $GITHUB_OUTPUT
            WNSENA=$(date "+%Y-%m-%d_%H:%M:%S")_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 4)
            echo "WNSENA=$WNSENA" >> $GITHUB_OUTPUT

      - name : deploy workspace powerbi 
        uses : Cosmo-Tech/babylon-actions/.github/actions/powerbi@asset
        with:
          workspace_name_dashboard: asset_dashboard_${{ steps.GWN.outputs.WNDASH }}
          workspace_name_scenario: asset_scenario_${{ steps.GWN.outputs.WNSENA }}

      - name: retrieve sample webapp
        uses: Cosmo-Tech/babylon-actions/.github/actions/retrieve@asset
        with:
          repo_from: Cosmo-Tech/phoenix-asset-product-webapp
          branch_from: upstream/deployment/dev1
          repo_to: Cosmo-Tech/azure-webapp-asset-qa
          branch_to: dev/asset
          username: mohcine
          email: mohcine.tor@cosmotech.com
      
      - name: increment deployment name field
        id: idnf
        run: |
            cd ${{ env.dir }}
            deployment_name=$(babylon config get -c ${{ env.CONTEXT_ID }} -p ${{ env.PLATFORM_ID }} webapp deployment_name)
            random_string=$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 4)
            new_deployment_name=${deployment_name}_${random_string}
            babylon config set -c ${{ env.CONTEXT_ID }} -p ${{ env.PLATFORM_ID }} webapp deployment_name $new_deployment_name

      - name: deploy webapp
        uses: Cosmo-Tech/babylon-actions/.github/actions/webapp@asset
            
      - name: Retrieve azure function key
        uses: Cosmo-Tech/babylon-actions/.github/actions/azurefunctionkey@asset
        with:
          resource_group: phoenixdev

      - name: create connector storage
        uses: Cosmo-Tech/babylon-actions/.github/actions/connector@asset
        with:
          type: storage
          version: 1.1.2
          name: "Asset_Baby_Connector_STORAGE"

      - name : Add Templates
        run: |
            if [ "${{ env.PLATFORM_ID }}" == "dev" ]; then
              cp $config_path/dev/dataset.storage.yaml ${{ env.dir }}/.payload/${{ env.CONTEXT_ID }}.dev.dataset.storage.yaml
              cp $config_path/dev/solution.yaml ${{ env.dir }}/.payload/${{ env.CONTEXT_ID }}.dev.solution.yaml
            elif [ "${{ env.PLATFORM_ID }}" == "perf" ]; then
              cp $config_path/perf/dataset.storage.yaml ${{ env.dir }}/.payload/${{ env.CONTEXT_ID }}.perf.dataset.storage.yaml
              cp $config_path/perf/solution_WP01_performance.yaml ${{ env.dir }}/.payload/${{ env.CONTEXT_ID }}.perf.solution.yaml
            elif [ "${{ env.PLATFORM_ID }}" == "staging" ]; then
              cp $config_path/staging/dataset.storage.yaml ${{ env.dir }}/.payload/${{ env.CONTEXT_ID }}.staging.dataset.storage.yaml
              cp $config_path/staging/solution.yaml ${{ env.dir }}/.payload/${{ env.CONTEXT_ID }}.staging.solution.yaml
            else
              echo "Unsupported PLATFORM_ID: ${{ env.PLATFORM_ID }}"
            fi
            
      - name: create dataset storage
        uses: Cosmo-Tech/babylon-actions/.github/actions/dataset@asset
        with:
          type: storage
          name: "Asset_Baby_dataset_STORAGE" 
            
      - name: create solution Asset
        uses: Cosmo-Tech/babylon-actions/.github/actions/solution@asset

      - name: create workspace Asset
        uses: Cosmo-Tech/babylon-actions/.github/actions/workspace@asset
        with:
          name: Asset_Baby_Workspace
          email: mohcine.tor@cosmotech.com
          role: admin

      - name: upload CSV file asset
        uses: Cosmo-Tech/babylon-actions/.github/actions/upload_dataset@asset
      
      # - name: Access Control workspaces
      #   uses: Cosmo-Tech/babylon-actions/.github/actions/emial@asset
      #   with:
      #     emails: "jean-charles.planchenault@cosmotech.com diamantis.sellis@cosmotech.com"
      #     mode: "workspaces"

      - name: Access Control organizations
        uses: Cosmo-Tech/babylon-actions/.github/actions/emial@asset
        with:
          emails: "jean-charles.planchenault@cosmotech.com diamantis.sellis@cosmotech.com"
          mode: "organizations"